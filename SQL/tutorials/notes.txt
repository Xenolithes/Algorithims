Data Types

INTEGER, a positive or negative whole number
TEXT, a text string
DATE, the dat formatted as YYYY-MM-DD
REAL, a decimal value
NULL, represents missing or unknown data

Statements

A statement is text that the database recognizes as a valid command

CREATE TABLE table_name (
    column_1 data_type,
    column_2 data_type,
    column_3 data_type,
)

INSERT INTO table_name(id, name, age)
VALUES (id_value, name_value, age_value)


SELECT column FROM table_name;
SELECT * FROM table_name; 

ALTER TABLE statement adds a new column to a table, ADD COLUMN adds a new column to the table
ALTER TABLE table_name
ADD COLUMN column_name TEXT;

UPDATE table_name
SET column_name = 'value'
WHERE id = value;

DELETE FROM table_name
WHERE column_name IS value


Constraints that add information about how a column can be used are invoked after specifying
the data type for a column. They can be used to tell the data base to reject inserted data
that does not adhere to certain restrictions.

 CREATE TABLE awards (
   id INTEGER PRIMARY KEY,
   recipient TEXT NOT NULL,
   award_name TEXT DEFAULT 'Grammy'
 );

 SELECT * FROM awards;


Query

SELECT name AS 'Titles' FROM movies;

This will pull a list of names of movies but will be listed as titles instead of names

Distinct

When we are examining data in a table, it can be helpful to know what distinct values exist
in a particular column

DISTINCT is ued to return unique values in the oautput. It filters out all duplicate values
in the specified columns

SELECT DISTINCT column_name FROM table_name

WHERE We can restrictour query results using WHERE clause in order to obrain only the information
we want.

SELECT * FROM table WHERE colum_name > value;

Operators
= equal to
!= not equal to
> greater than
< less than
>= greater than or equal to
<= less than or equal to

LIKE can be a useful operator when you want to compare similar values.

SELECT * FROM table_name WHERE name LIKE 'va_ue';
 The _ in the string says that it can be substitute any individual character without breaking
 the pattern

 THe percentage sign % is another wildcard character that matches zero or more missing letters in the pattern
 For Example
 A% matches all values that begin with the letter 'A'
 %a matches all value sthat end with 'a'
 You can also use both
 %a%


 Test for Null values
 IS NULL 
 IS NOT NULL

 SELECT column_name FROM table_name WHERE column_name IS NOT NULL


The BETWEEN operator is used in a WHERE clause to filter the
results set within a certain range. It accepts two values that are
either number, text or dates.

for numbers and date it works as you think it would
for text it filters results set for within the alphabetical range

SELECT * FROM table WHERE year BETWEEN 1970 AND 1979;

And 
Sometimes we want to combine multiple conditions in a WHERE clause to make the result
set more specific and useful

SELECT * FROM table_name WHERE condition_one AND condition_two

Or 
The OR operator can also be used to combine multiple conditions in WHERE but
thereis a fundamental difference opertor displays a row if any condition is true

SELECT * FROM table_name WHERE condition_one OR condition_two;

Order By

We can sort the results using ORDER BY, either alphabetically or numerically.
Sorting the results often makes the data more useful and easier to analyze

SELECT * FROM table_name ORDER BY column_name
SELECT * FROM table_naem ORDER BY column_name DESC;

Limit

Limit is a clause that lets you specify the maximum number of rows the result set will have
THis save space on screen and makes queries run faster

SELECT * FROM table_name LIMIT 10;

example of getting the top three of a particular column
SELECT * FROM table_name ORDER BY column_name DESC LIMIT 3;

Case 

A CASE statement allow us to create different outputs (usually in the SELECT statement)
It is the SQL's way of handling if-then logic.

Example
SELECT name,
CASE 
    WHEN condition_one THEN 'value'
    WHEN condition_two THEN 'value'
    ELSE 'value'
END
AS 'Temp Column Name'
FROM table_name;


Aggregations

Calculations performed on multiple rows of a table are called aggregates

COUNT (): count the number of rows
SUM (): the sum of values in a column
MAX()/MIN(): The largest/smallest values
AVG(): The average of the calues in a Column
ROUND(): Round the values in the column

count
The fastest way to caluclate how many rows are in a table is to use the COUNT() functions

SELECT COUNT(*) FROM table_name
This will count every row 


SUM 

SQL makes it wasy to add all values in a particular column using SUM()

SUM() is a fucntion that take the name of a column as an argument and return sthe sum
of all the values in that column

Max/MIN
The MAX() and MIN() functions return the highest and lowest values in a column, respecively

Average 
SQL uses the AVG() function to quickly claculate the average value of a particular column

Round
By default SQL tries to be as precise as possible without rounding
We can make the result table easier to read using the ROUND() function

Round() function take two arguments inside the parenthesis
1. Column Name
2. INTEGER

It rounds the value in the column to the number of decimal places specified by the integer

Exmaple of using both ROUND and AVG
SELECT ROUND(AVG(price), 2) FROM table_name;


Group By 1

Oftentimes, we will want to caluclate an aggregate for data with certain characteristics.
FOr instance we might want to know the meain IMDb ratings for movies each year

GROUP BY is a clause in SQL that is used with aggregate functions. It is used in
collaboration with the SELECT statements to arrange identical data into groups

The GROUP BY statement comes after any WHERE statements but before ORDER BY or LIMIT

SELECT column_name, SUM(column_name) FROM table_name GROUP BY column_name

Group By 2

somteimes we want to GROUP BY a calculation done on a column
for instance we might want to know how many items have a value that rounds to 1, 2, 3, 4, or 5

SQL lets us use column reference(s) in GROUP BY
1: Is the first column selected
2: Is the second column selected
3: Is the third column selected

For Example

SELECT ROUND(column_name), COUNT(column_name) FROM table_name GROUP BY 1 ORDER BY 1;
In this example 1 refers to the first column in the SELECT statement


Having 

In addition to being able to gorup data using GROUP BY, SQL also allos
one to filter which groups to include and which to exclude

For instance imagine that we want tos ee ho many items of different types were
produced over a period of tiem but we only care about a pariticular time formatted
we can't use WHERE because we do not want to filter the rows we want to filter groups
this is wehrer HAVING come in

SELECT column_name, column_name, COUNT(column_name) FROM table_name GROUP BY 1, 2 HAVING COUNT(column_name) > value;

Having can be placed after the GROUP BY clause unlike the WHERE clause

Multiple Tables

Combining tables manually is time-consuming. Luckily, SQL gives 
an easy sequence for this: it's called JOIN.

SELECT * FROM table JOIN table ON table.column_name = table.column_name


SELECT *
FROM orders
JOIN customers
  ON orders.customer_id = customers.customer_id;

1. The first line selects all columns from our combined table.
If you only want to select certain columns, we can specify which
ones we weant

2. The second line specifies the first table that we want to look in, orders
3. The third line uses JOIN to say that we want to combine information from orders with customers
4. The fourth line tessl us how to combine the two tables. We wnat to match orders table's customer_id
column with customers table's cutomer_id column

You can then use the WHERE clause after the JOIN to reduce the number of returned rows


INNER JOINS

When one performas a simple join (often called an inner joion) our results only includes rows that match our ON condition

An example count all the rows that are joined on a similar id

SELECT COUNT(*) FROM table_one JOIN table_two ON table_one.id = table_two.id;


LEFT JOINS

What if we want to combine two tables and keep some of the un-matched rows?
SQL lets us to this through a command called LEFT JOIN.
A left join will keep all rows from the frist table regardless of whether there is a matching
row in the second table.

SELECT *
FROM table1
LEFT JOIN table2
  ON table1.c2 = table2.c2;


  Primary Key vs Foreign Key

  Primary Keys are uniquely identifies
  - None of the value can be NULL
  - Each value must be unique ( i.e., you can't have two rows with the same primary key value in the table )
  - A table can not have more than one primary key column

  When a primary key for one table appears in a different table, it is called a foreign key


  CROSS JOIN 
  Sometimes, we just want to combine all rows of one table with another table
  This would be a CROSS JOIN
  
  SELECT * FROM table_name CROSS JOIN table_name;

  UNION

  Sometimes we just want to stack one dataset on top of the other
  Well, the UNION operator allows us to do that.
  
  SELECT * FROM table1 UNION SELECT * FROM table2

  Rules for unions tables must have the same number of columns
  The columns must have the same data types in the same order as the first table

  WITH

  Often times you want to combine two tables but one of the tablesis the result of another calculation

  The WITH statement allows us to perform a separate
  query

  WITH temporary_table AS (
    SELECT ....
    ...
    ...
    ...
    ...
  )
  SELECT *
  FROM temporary_table
  JOIN table_name
  ON ____ = _____